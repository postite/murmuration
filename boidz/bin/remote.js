// Generated by Haxe 3.3.0
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var _$Api_Color_$Impl_$ = {};
_$Api_Color_$Impl_$.__name__ = true;
_$Api_Color_$Impl_$.$name = function(c) {
	switch(c) {
	case "#00AAFF":
		return "blue";
	case "#8116C9":
		return "violet";
	case "#9FD665":
		return "green";
	case "#E6D67E":
		return "ocre";
	case "#F27C4E":
		return "orange";
	default:
		return "rien";
	}
};
var Api = function() { };
Api.__name__ = true;
var Config = function() {
};
Config.__name__ = true;
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
msignal_Signal.__name__ = true;
msignal_Signal.prototype = {
	add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		if(this.slots.find(listener) == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
msignal_Signal0.__name__ = true;
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
});
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
msignal_Signal1.__name__ = true;
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
msignal_Signal2.__name__ = true;
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
msignal_Slot.__name__ = true;
msignal_Slot.prototype = {
	remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot0.__name__ = true;
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot1.__name__ = true;
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot2.__name__ = true;
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null?msignal_SlotList.NIL:tail;
		this.nonEmpty = true;
	}
};
msignal_SlotList.__name__ = true;
msignal_SlotList.prototype = {
	get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,append: function(slot) {
		if(slot == null) {
			return this;
		}
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		if(this.tail == msignal_SlotList.NIL) {
			return new msignal_SlotList(slot).prepend(this.head);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,contains: function(listener) {
		if(!this.nonEmpty) {
			return false;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return true;
			}
			p = p.tail;
		}
		return false;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
};
var socket_signal_ControlSignal = function() {
	msignal_Signal2.call(this,String,Dynamic);
};
socket_signal_ControlSignal.__name__ = true;
socket_signal_ControlSignal.getInstance = function() {
	if(socket_signal_ControlSignal._instance == null) {
		socket_signal_ControlSignal._instance = new socket_signal_ControlSignal();
	}
	return socket_signal_ControlSignal._instance;
};
socket_signal_ControlSignal.__super__ = msignal_Signal2;
socket_signal_ControlSignal.prototype = $extend(msignal_Signal2.prototype,{
});
var remote_Controller = function() {
	this.boxMap = new haxe_ds_StringMap();
	this.colors = ["blue","white","red"];
	new socket_SocketManager().connected.addOnce($bind(this,this.execute));
	this.doc = window.document;
};
remote_Controller.__name__ = true;
remote_Controller.main = function() {
	new remote_Controller();
};
remote_Controller.prototype = {
	execute: function(arg) {
		console.log("hello bob");
		var _g = 1;
		while(_g < 3) {
			var a = _g++;
			this.generateBox("box" + a,this.colors[a - 1]);
		}
		var _this = this.boxMap;
		(__map_reserved.box1 != null?_this.getReserved("box1"):_this.h["box1"]).touch("action","reload");
		var _this1 = this.boxMap;
		(__map_reserved.box2 != null?_this1.getReserved("box2"):_this1.h["box2"]).touch("action","togDebug");
		this.generateBox("act1","green").touch("action","walk");
		this.generateBox("act1","yellow").touch("action","nowalk");
		var b = this.addBar();
		b.appendChild(this.generateBox("scenTest","purple").touch("action","scene1").box);
		b.appendChild(this.generateBox("scenTest","purple").touch("action","scene2").box);
		b.appendChild(this.generateBox("scenTest","purple").touch("action","scene3").box);
		b.appendChild(this.generateBox("scenTest","purple").touch("action","scene4").box);
		b.appendChild(this.generateBox("scenTest","purple").touch("action","scene5").box);
		this.generateBox("red","red").touch("action","towardCenter");
		this.generateBox("fall","olive").touch("action","fall");
		this.generateBox("contain","orange").touch("action","contain");
		this.generateBox("invade","gray").touch("action","invade");
		this.generateBox("scenario","gray").touch("action","scenario");
	}
	,addBar: function() {
		var bar = this.doc.createElement("div");
		bar.classList.add("bar");
		this.doc.body.appendChild(bar);
		return bar;
	}
	,generateBox: function(id,color) {
		var b = new remote_Box(id,color);
		var _this = this.boxMap;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,b);
		} else {
			_this.h[id] = b;
		}
		return b;
	}
};
var remote_Box = function(id,color) {
	this.box = window.document.createElement("div");
	this.box.id = id;
	this.box.classList.add("box");
	this.htitre = window.document.createElement("h6");
	this.htitre.innerText = "op";
	this.box.appendChild(this.htitre);
	this.box.style.backgroundColor = color;
	window.document.body.appendChild(this.box);
};
remote_Box.__name__ = true;
remote_Box.prototype = {
	touch: function(type,value) {
		var _gthis = this;
		this.type = type;
		this.value = value;
		this.titre = value;
		this.htitre.innerText = this.titre;
		this.box.addEventListener("click",function(e) {
			console.log("click");
			remote_Controller.signal.dispatch(_gthis.type,_gthis.value);
		});
		return this;
	}
};
var socket_SocketManager = function() {
	this.dims = { width : 0, height : 0, clientID : 0};
	this._messages = [];
	this.connected = new msignal_Signal1();
	var _gthis = this;
	var $window = window;
	var document = window.document;
	$window.onload = function() {
		_gthis.dims.width = $window.outerWidth;
		_gthis.dims.height = $window.outerHeight;
		_gthis.connect();
	};
	socket_signal_SplitOut.getInstance().add($bind(this,this.sendMessage));
	socket_signal_WalkOut.getInstance().add($bind(this,this.sendWalk));
	socket_signal_ControlSignal.getInstance().add($bind(this,this.sendControl));
};
socket_SocketManager.__name__ = true;
socket_SocketManager.prototype = {
	sendControl: function(type,value) {
		console.log("sendControl");
		this._socket.emit("ctrl",{ type : type, value : value});
	}
	,sendWalk: function(dir,sprite) {
		console.log("sendWalk");
		this._socket.emit("walk",{ dir : dir, sprite : sprite});
	}
	,sendMessage: function(dir,boid) {
		this._socket.emit("send",{ dir : dir, data : boid});
	}
	,connect: function() {
		var _gthis = this;
		this._messages = [];
		this._socket = io.connect(Config.adress);
		this._socket.on("message",function(args) {
			if(args.data != null) {
				socket_SocketManager.emitSignal.dispatch(args.dir,args.data);
			} else {
				console.log("There is a problem: " + Std.string(args.data));
			}
		});
		this._socket.on("walking",function(args1) {
			console.log("yo walk");
			socket_SocketManager.walkSignal.dispatch(args1.dir,args1.sprite);
		});
		this._socket.on("control",function(args2) {
			console.log("yo control");
			socket_SocketManager.ctrlSignal.dispatch(args2.type,args2.value);
		});
		this._socket.on("clientConnect",function(data) {
			_gthis.clientId = data.clients;
			console.log("clientId=" + _gthis.clientId);
			_gthis.dims.clientID = _gthis.clientId;
			_gthis.connected.dispatch(_gthis.dims);
		});
	}
	,displayClient: function() {
		window.document.querySelector("#clientId").innerHTML = "clientID=" + this.clientId;
	}
};
var socket_signal_SplitOut = function() {
	msignal_Signal2.call(this,String,Dynamic);
};
socket_signal_SplitOut.__name__ = true;
socket_signal_SplitOut.getInstance = function() {
	if(socket_signal_SplitOut._instance == null) {
		socket_signal_SplitOut._instance = new socket_signal_SplitOut();
	}
	return socket_signal_SplitOut._instance;
};
socket_signal_SplitOut.__super__ = msignal_Signal2;
socket_signal_SplitOut.prototype = $extend(msignal_Signal2.prototype,{
});
var socket_signal_WalkOut = function() {
	msignal_Signal2.call(this,String,Dynamic);
};
socket_signal_WalkOut.__name__ = true;
socket_signal_WalkOut.getInstance = function() {
	if(socket_signal_WalkOut._instance == null) {
		socket_signal_WalkOut._instance = new socket_signal_WalkOut();
	}
	return socket_signal_WalkOut._instance;
};
socket_signal_WalkOut.__super__ = msignal_Signal2;
socket_signal_WalkOut.prototype = $extend(msignal_Signal2.prototype,{
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
var Dynamic = { __name__ : ["Dynamic"]};
var __map_reserved = {}
msignal_SlotList.NIL = new msignal_SlotList(null,null);
_$Api_Color_$Impl_$.green = "#9FD665";
_$Api_Color_$Impl_$.ocre = "#E6D67E";
_$Api_Color_$Impl_$.blue = "#00AAFF";
_$Api_Color_$Impl_$.orange = "#F27C4E";
_$Api_Color_$Impl_$.violet = "#8116C9";
Config.adress = "http://localhost:3700";
remote_Controller.signal = socket_signal_ControlSignal.getInstance();
socket_SocketManager.emitSignal = new msignal_Signal2();
socket_SocketManager.walkSignal = new msignal_Signal2();
socket_SocketManager.ctrlSignal = new msignal_Signal2();
remote_Controller.main();
})();
