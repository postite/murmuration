// Generated by Haxe 4.0.0 (git build development @ da28365)
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function () { "use strict";
var Config = function() { };
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
var js_node_Http = require("http");
var js_npm_Express = require("express");
var js_npm_express_Static = require("express").static;
var js_npm_socketio_Server = require("socket.io");
var socket_Server = function() {
	this.PORT = 3700;
	console.log("boidz/socket/Server.hx:29:","Express website (Basic): open browser at " + Config.adress + this.PORT);
	console.log("boidz/socket/Server.hx:30:","Stop node.js : CTRL + c");
	var app = new js_npm_Express();
	var server = js_node_Http.createServer(app);
	var io = new js_npm_socketio_Server(server);
	app.set("views",__dirname + "/views/");
	app.set("view engine","jade");
	app.use(new js_npm_express_Static(__dirname + "/"));
	app.get("/client/:id",function(req,res) {
		res.render("page",{ bip : "bop", client : req});
	});
	app.get("/remote",function(req1,res1) {
		res1.render("rem",{ bip : "remote"});
	});
	app.get("/rasp1",function(req2,res2) {
		res2.render("rasp1",{ bip : "rasp"});
	});
	io.on("connection",function(socket1) {
		socket_Server.numClient = (socket_Server.numClient + 1) % 2;
		socket1.emit("clientConnect",{ clients : socket_Server.numClient});
		socket1.on("send",function(light) {
			io.sockets.emit("message",light);
		});
		socket1.on("ctrl",function(arg) {
			io.sockets.emit("control",arg);
		});
		socket1.on("walk",function(arg1) {
			io.sockets.emit("walking",arg1);
		});
	});
	io.on("disconnect",function(socket2) {
		socket_Server.numClient = socket_Server.numClient - 2;
		console.log("boidz/socket/Server.hx:86:","disconnect");
	});
	console.log("boidz/socket/Server.hx:90:","Listening on port " + this.PORT);
	server.listen(this.PORT);
};
socket_Server.main = function() {
	var main = new socket_Server();
};
Config.adress = "http://192.168.1.34:3700";
socket_Server.numClient = 0;
socket_Server.main();
})();
