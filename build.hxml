# Autogenerated build.hxml
--connect 7000
--each
# Main (js:main.js)
boidz/build.hxml

--next 

# libs used in project
-lib js-kit
-lib hxnodejs
-lib hx3compat
#integrate files to classpath
-cp boidz

#this class wil be used as entry point for your app.
-main socket.Server

#JavaScript target
-js boidz/bin/server.js

#You can use -D source-map-content (requires Haxe 3.1+) to have the .hx
#files directly embedded into the map file, this way you only have to
#upload it, and it will be always in sync with the compiled .js even if
#you modify your .hx files.
# -D source-map-content

#Generate source map and add debug information
#-debug

#dead code elimination : remove unused code
#"-dce no" : do not remove unused code
#"-dce std" : remove unused code in the std lib (default)
#"-dce full" : remove all unused code
-dce full

# This is very cool, but not necessary for this project, you can create a package.json with the correct depencicies (https://github.com/clemos/haxe-js-kit#exporting-your-project-dependencies)
#--macro npm.Package.export("package.json")




#-cmd killall node

# Use terminal command to start Node.js!
 #-cmd cd bin


--next

remote.hxml
#
#-cp boidz
#-lib hx3compat
#-lib js-kit
#-lib hxnodejs 
#-main remote.Remote
#-lib msignal
#-js boidz/bin/remote.js
#-lib thx.core
#-lib thx.unit
#-D network-sandbox
#-D source-map-content
#-D hxnodejs_no_version_warning
#
#-cmd node boidz/bin/server.js
#-cmd open -a safari http://192.168.1.34:3700
#-cmd open -a safari http://192.168.1.34:3700
#-cmd open -a safari http://192.168.2.46:3700




